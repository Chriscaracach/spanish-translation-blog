How to React
3 de Noviembre de 2021 - Tiempo de lectura 8 minutos

La mejor manera de aprender React es... honestamente, es diferente para todos. Pero aqu√≠ hay algunos consejos √∫tiles de alguien que le ha ense√±ado React a decenas (¬øcientos?) de miles de desarrolladores/as.

Abstracci√≥n
Empecemos hablando acerca de la Abstracci√≥n. Aqu√≠ hay un ejemplo de abstracci√≥n de youmightnotneedjquery.com:

---Code---
// $(el).toggleClass(className);

function toggleClass(el, className) {
  if (el.classList) {
    el.classList.toggle(className)
  } else {
    var classes = el.className.split(' ')
    var existingIndex = -1
    for (var i = classes.length; i--; ) {
      if (classes[i] === className) existingIndex = i
    }

    if (existingIndex >= 0) {
      classes.splice(existingIndex, 1)
    } else {
      classes.push(className)
    }

    el.className = classes.join(' ')
  }
}
----------

Muy √∫til. Pero aqu√≠ est√° el truco ... Si tu no necesitas darle soporte a IE8, entonces puedes cambiar √©sto:

---Code---
// $(el).toggleClass(className)

function toggleClass(el, className) {
  el.classList.toggle(className)
}
----------

Lo que, honestamente, es una abstracci√≥n que no deber√≠a existir en absoluto... el.classList.toggle(className) es suficiente en s√≠ mismo.

As√≠ que, √©sto es lo que necesit√°s saber sobre una abstracci√≥n antes de usarlo en el flujo de trabajo de tu aplicaci√≥n:

¬øCu√°l es el beneficio de √©sta abstracci√≥n?
¬øCu√°l es el costo de √©sta abstracci√≥n?
Si no sab√©s √©stas cosas, entonces corr√©s el riesgo de pagar el costo de solucionar un problema que no ten√©s. ¬°Un costo sin beneficio no es negocio!

Una parte importante de entender los costos y beneficios es "sentir" el dolor del problema que √©sta abstracci√≥n resuelve. Por eso es importante aprender React y su ecosistema en el orden correcto para estar seguro de que no no est√°s sobrepasado por aprender demasiado al mismo tiempo y usar las abstracciones efectivamente.

Para mas de √©sto, chequ√©a "AHA Programming" (?)

Una nota... ¬øSolo quer√©s jugar con cosas? ¬øSolo quer√©s enviar cosas? Eso es totalmente genial. Solamente reconoc√© que no conoc√©s los alcances de React y eso puede jugarte en contra en el futuro. Si el futuro no te importa tanto, ¬°entonces no te preocupes!

Empezando con Javascript + JS Moderno
Una de las cosas que amo de React es "cu√°n Javascript es". Si pod√©s construir una simple aplicaci√≥n con Javascript regular y las APIs del DOM, entonces vas a entender mucho mejor los beneficios de React. Tambi√©n vas a ser mucho m√°s efectivo usando React, porque honestamente, el 90% de ser efectivo con React es entender buen JavaScript. Para √©sto, te sugiero leer mi publicaci√≥n "Javascript to know for React". Tambi√©n echa un vistazo a javascript30.com (gratuito) y beginnerjavascript.com (pago), ambos de Wes Bos.

Adem√°s, conocer las caracter√≠sticas del JavaScript Moderno ir√° muy lejos. Debido a que JSX necesita un compilador, la mayor√≠a de los desarrolladores/as React dan por sentadas las caracter√≠sticas/compiladores del Javascript moderno. Asi que la mayor√≠a de los tutoriales van a asumir que tu tienes una comprensi√≥n b√°sica de las caracter√≠sticas modernas de Javascript. Para eso, les sugiero mi Workshop "ES6 and Beyond" (free) que es una grabaci√≥n de un taller que di en PayPal.

Luego, vamos a aprender React
Demasiado material "para principiantes" de React empieza con JSX y un mont√≥n de herramientas. React en s√≠ mismo es sorprendentemente simple (y la documentaci√≥n es muy buena, sobre todo la Beta). Lo que amo de React es su simplicidad. Tristemente, todo alrededor de √©l puede volverse complicado y puede ser dif√≠cil de saber donde est√°n los l√≠mites entre React y las herramientas/librer√≠as que se usan con √©l. Es por √©sto que cre√© "The Beginner's Guide to React" totalmente gratis en Egghead.io. Empieza con todo en el archivo index.html, lo que creo que es importante. No necesitas ninguna herramienta para usar React. He construido proyectos reales con √©sta aproximaci√≥n para una r√°pida iteraci√≥n y despliegue. Francamente, no puedo pensar en una forma m√°s r√°pida de construir ese tipo de aplicaciones simples, y √©sto te permite evitar una gran cantidad de innecesaria complejidad y llegar a construir y entregar aplicaciones r√°pidamente. Pod√©s aprender m√°s sobre √©sta aproximaci√≥n en mi publicaci√≥n "Super Simple Start to React".

La √∫ltima lecci√≥n de mi curso gratuito de egghead te muestra c√≥mo usar CodeSandbox.io para crear tu aplicaci√≥n completamente en el navegador y descargarla a tu computadora a una aplicaci√≥n create-react-app.

¬°No necesitas nada instalado para llegar muy lejos! Y una vez que lo hagas, puedes avanzar mucho sin tener que configurar ninguna herramienta. Conozco varias empresas que desarrollan su aplicaci√≥n con create-react-app.

Adem√°s, tengo una gran cantidad de contenido relacionado con React en mi blog üòÖ

Si buscas el camino r√°pido para aprender React, no busques m√°s all√° de EpicReact.Dev. Te ense√±ar√° todo lo que hace mi Gu√≠a para principiantes de React y MUCHO m√°s. EpicReact puede ser tu compa√±ero desde el inicio de tu viaje con React hasta convertirte en un jefe completo en esto. Y lo hace de manera tan efectiva gracias a su enfoque basado en ejercicios. Pasar√°s MUCHO m√°s tiempo con tus dedos en el teclado aplicando lo que est√°s aprendiendo que lo que cualquier curso en l√≠nea t√≠pico te dar√°. No te pierdas EpicReact.Dev.

Dependencias y npm
Una vez que hayas decidido que no quieres escribir tu propia versi√≥n de cada componente que uses, puedes empezar a investigar las dependencias. Hay un MONTON de componentes por ah√≠ y aqu√≠ es donde realmente debes comenzar a hacer preguntas como "cu√°l es el costo" y "cu√°l es el beneficio". Trata de no agregar una dependencia hasta despu√©s de "sentir el dolor" que se supone que resuelve. Te har√° m√°s efectivo usando esa dependencia.

Te sugiero que leas la documentaci√≥n de npm en una tarde. En serio, hazlo. Hay informaci√≥n realmente valiosa all√≠.

Adem√°s, cuando comiences a usar dependencias, querr√°s aprender a importarlas. Tengo una charla llamada "More than you wanto to know about ES6 Modules" que probablemente encuentres llena de informaci√≥n √∫til sobre la sintaxis de los m√≥dulos ES.

Remix
Es hora de ser serios sobre la construcci√≥n de una aplicaci√≥n en el mundo real. No importa lo que planees construir con React en la web, estar√°s bien servido si usas Remix como tu framework de elecci√≥n. Me ha permitido construir √©ste sitio web con un excelente rendimiento y manteniendo un c√≥digo fant√°stico que amo trabajar.

Para aprender Remix, recomiendo la documentaci√≥n oficial. Tambi√©n tengo alg√∫n contenido de Remix en mi blog que podr√≠a ser √∫til para ti.

Gesti√≥n de estado
La mayor parte de la gesti√≥n t√≠pica del estado ser√° administrada por Remix, pero para el estado de la interfaz de usuario (estado que no se persiste en un backend), tendras que comprender c√≥mo gestionar el estado dentro de React.

Cuando aprendiste React, aprendiste sobre la API useState. Probablemente tambi√©n aprendiste sobre Lifting State Up. En realidad, esto puede llevarte muy lejos con React y te animo a seguir haci√©ndolo mientras puedas. Eventualmente, es posible que comiences a tener alg√∫n problema con "el prop-drilling". Lo sabr√°s cuando lo sientas. Cuando esto suceda, te sugiero que leas mi publicaci√≥n "Application State Management".

React es una biblioteca de gesti√≥n del estado de la aplicaci√≥n y no necesita Redux.

Estilo de componentes
Honestamente, no puedo dejar de recomendar Tailwind. Una vez que tu aplicaci√≥n tenga m√°s de unas pocas cientos de l√≠neas de CSS, encontrar√° que Tailwind puede simplificar realmente las cosas conceptualmente para ti. Es "un framework de CSS con prioridad a las utilidades para construir r√°pidamente dise√±os personalizados".

Eso dicho, Remix tiene un mecanismo fant√°stico para cargar (y descargar!!) CSS en una base por ruta, por lo que puede ser capaz de manejar solo escribir CSS regular por un tiempo antes de necesitar algo como Tailwind.

Y adem√°s...
Desde aqu√≠ te sugiero que te sumerjas m√°s profundamente en React. Tengo mi curso de Patrones avanzados de componentes de React en egghead.io que puede darte mucha informaci√≥n realmente buena (pero puede obtener una versi√≥n m√°s actualizada de este contenido en EpicReact.dev de todos modos, por lo que te sugiero que lo tomes).

Conclusi√≥n
Espero que esto te d√© (y a sus amigos) un camino para c√≥mo aprender React y d√≥nde comenzar cuando se construyen aplicaciones de React. Agregar abstracciones a tu aplicaci√≥n demasiado temprano las hace menos flexibles, por lo que generalmente seguir√≠a este patr√≥n al construir aplicaciones. ¬°Buena suerte!